-- Version 1.71 (Added View constructor, broke down some code into smaller methods, performance worsened by a tiny bit due to more accessing of Object content rather than local variables)

--[[

MIT License

Copyright (c) <2025> <grewsxb4>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

]]

local Path = require(script:WaitForChild("Path"))
local GS = require(script:WaitForChild("GoodSignal"))
local RS = game:GetService("RunService")

local module = {}

local NoobPath = {}
NoobPath.__index = NoobPath

export type Location = Vector3 | BasePart | Model

local function GetPrimaryPivot(Model : Model)
	return Model.PrimaryPart:GetPivot()
end

local function ToVector3(Location : Location)
	if typeof(Location) == "Vector3" then
		return Location
	elseif Location:IsA("Model") then
		return GetPrimaryPivot(Location).Position
	elseif Location:IsA("BasePart") then
		return Location:GetPivot().Position
	end
end

local function RemoveNetworkOwner(Character : Model)
	local Descendants = Character:GetDescendants()
	for i = 1, #Descendants do
		local Item = Descendants[i]
		if Item:IsA("BasePart") and Item:CanSetNetworkOwnership() then
			Item:SetNetworkOwner(nil)
		end
	end
end

local Server = RS:IsServer()

-- Constructor
function module.new(Character: Model, AgentParams: Path.AgentParams, Move: (Vector3) -> nil, Jump: () -> nil, JumpFinished: RBXScriptSignal, MoveFinished: RBXScriptSignal)
	if Server then
		RemoveNetworkOwner(Character)
	end
	
	local self = setmetatable({
		Character = Character,
		Path = Path.new(AgentParams),
		Route = {},
		Index = 1,
		Idle = true,
		InAir = false,
		Estimate = {},
		Destroying = false,
		Goal = nil,
		Partial = false,
		
		Overide = GS.new(),
		Reached = GS.new(),
		WaypointReached = GS.new(),
		Error = GS.new(),
		Trapped = GS.new(),
		Stopped = GS.new(),
		OnDestroy = GS.new(),
		
		Move = Move,
		Jump = Jump,
		MoveFinished = MoveFinished,
		JumpFinished = JumpFinished,
		
		Timeout = false, -- trigger trapped if didn't arrive in time, time is auto estimated using speed
		Speed = 16, -- default speed
		Visualize = false, -- if there are many npcs with visualize on, it can create lag & disrupt pathfind
		
		MoveFinishedC = nil,
		JumpFinishedC = nil,
	}, NoobPath)
	
	self:Activate()
	
	return self
end

-- Constructor With Default Humanoid Signals
function module.Humanoid(Character : Model, AgentParams : Path.AgentParams)
	local Humanoid : Humanoid = Character:FindFirstChildOfClass("Humanoid")
	local Move = function(WaypointPosition) Humanoid:MoveTo(WaypointPosition) end
	
	local JumpFinished = GS.new()
	local MoveFinished = Humanoid.MoveToFinished
	
	local self = module.new(Character, AgentParams, Move, nil, JumpFinished, MoveFinished)
	
	local Jump = function() 
		if Humanoid.FloorMaterial ~= Enum.Material.Air then
			Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			return
		end
		
		local C : RBXScriptConnection
		local A : RBXScriptConnection
		local B : RBXScriptConnection
		
		C = self.Overide:Connect(function()
			C:Disconnect()
			A:Disconnect()
			B:Disconnect()
			self.InAir = false
		end)
		A = Humanoid:GetPropertyChangedSignal("FloorMaterial"):Connect(function()
			if Humanoid.FloorMaterial ~= Enum.Material.Air then
				Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				C:Disconnect()
				A:Disconnect()
				B:Disconnect()
			end
		end)
		B = self.OnDestroy:Connect(function()
			C:Disconnect()
			A:Disconnect()
			B:Disconnect()
		end)
	end
	
	local C = Humanoid.StateChanged:Connect(function(Old, New)
		if (Old == Enum.HumanoidStateType.Jumping or Old == Enum.HumanoidStateType.Freefall) and (New ~= Enum.HumanoidStateType.Jumping and New ~= Enum.HumanoidStateType.Freefall) then
			JumpFinished:Fire()
		end
	end)
	
	self.Jump = Jump
	
	return self, C
end

function module.View(AgentParams : Path.AgentParams)
	return setmetatable({
		View = true,
		Path = Path.new(AgentParams),
		Route = {},
		Index = 1,
		Idle = true,
		InAir = false,
		Estimate = {},
		Destroying = false,
		Goal = nil,
		Partial = false,

		Overide = GS.new(),
		Reached = GS.new(),
		WaypointReached = GS.new(),
		Error = GS.new(),
		Trapped = GS.new(),
		Stopped = GS.new(),
		OnDestroy = GS.new(),

		Timeout = false, -- trigger trapped if didn't arrive in time, time is auto estimated using speed
		Speed = 16, -- default speed
		Visualize = false, -- if there are many npcs with visualize on, it can create lag & disrupt pathfind
	}, NoobPath)
end

function NoobPath:Compute(PointA, PointB)
	local Route, Partial = self.Path:Generate(PointA, PointB)
	
	if self.Destroying ~= false then
		return
	end

	if not self:ValidateRoute(Route, Partial) then
		return
	end
	
	self.Route = Route
	self.Partial = Partial
	
	if self.Timeout then
		if not self.Speed then
			error("No Speed Provided")
		end
		self:Predict()
	end

	if self.Visualize then
		self:Show()
	end
	
	return true
end

function NoobPath:Show()
	self.Path:Show(self.Route)
end

function NoobPath:Hide()
	self.Path:Hide()
end

function NoobPath:Predict()
	self.Estimate = self.Path:Estimate(self.Route, self.Speed)
end

function NoobPath:GetEstimateTotal()
	local Estimate = self.Estimate
	
	local Sum = 0
	for i = 1, #Estimate do
		Sum += Estimate[i]
	end
	
	return Sum
end

function NoobPath:Activate()
	if Server then
		self.DescendantAddedC = self.Character.DescendantAdded:Connect(function(Item)
			if Item:IsA("BasePart") and Item:CanSetNetworkOwnership() then
				Item:SetNetworkOwner(nil)
			end
		end)
	end
	
	
	self.MoveFinishedC = self.MoveFinished:Connect(function(Success) -- if you are using custom MoveFinished, Fire(true) if successfully reached
		if self.Idle then
			return
		end
		if Success then
			local NextWaypoint = self:GetNextWaypoint()
			if NextWaypoint then
				self:TravelNextWaypoint()
				self.WaypointReached:Fire(self:GetWaypoint(), NextWaypoint)

			else
				self:Arrive()
			end
		else
			self:Stop()
			self.Trapped:Fire("ReachFailed")
		end
	end)
	self.JumpFinishedC = self.JumpFinished:Connect(function()
		self.InAir = false
	end)
end

function NoobPath:PauseUntilLanded()
	local C :RBXScriptConnection
	local A : RBXScriptConnection
	local B :RBXScriptConnection
	
	C = self.Overide:Connect(function()
		C:Disconnect()
		A:Disconnect()
		B:Disconnect()
	end)
	
	A = self.JumpFinished:Connect(function()
		C:Disconnect()
		A:Disconnect()
		B:Disconnect()
		self:Run()
	end)
	
	B = self.OnDestroy:Connect(function()
		C:Disconnect()
		A:Disconnect()
		B:Disconnect()
	end)
end

function NoobPath:ValidateRoute(Route, Partial)
	if not Route then
		self.Error:Fire("ComputationError") -- No Route Generated/Error when generating
		return
	end
	if #Route == 0 then
		self.Error:Fire("TargetUnreachable") -- Can't Find Path
		return
	end
	if #Route < 2 then -- Route too short, likely already arrived
		self:Arrive(Route, Partial)
		return
	end
	return true
end

-- Caculate Route To Location & Move The Character There
function NoobPath:Run(Location : Location)
	if self.Destroying ~= false then
		return
	end
	
	self.Overide:Fire()
	
	if Location then
		self.Goal = Location
	else
		Location = self.Goal or error("No Destination Provided")
	end
	
	if self.InAir then
		self:PauseUntilLanded()
		return
	end
	
	if not self:Compute(GetPrimaryPivot(self.Character).Position, ToVector3(Location)) then
		return
	end
	
	self.Index = 1
	self.Idle = false
	
	self:TravelNextWaypoint()
end

-- Stop The Character From Moving
function NoobPath:Stop()
	if self.Destroying ~= false then
		return
	end
	self.Idle = true
	
	self.Overide:Fire()
	self.Move(GetPrimaryPivot(self.Character).Position)
	self.Stopped:Fire()
end

function NoobPath:GetWaypoint()
	return self.Route[self.Index]
end

function NoobPath:GetNextWaypoint()
	return self.Route[self.Index + 1]
end

function NoobPath:GetEstimateTime()
	return self.Estimate[self.Index]
end

function NoobPath:CheckForTimeout()
	local Time = self:GetEstimateTime()
	if not Time then
		return
	end
	
	local Route = self.Route
	local Index = self.Index
	
	task.delay(Time * 2, function() -- usually double time work best, not too sensitive
		if not self.Idle and self.Route == Route and self.Index == Index then
			self.Trapped:Fire("ReachTimeout")
		end
	end)
end

function NoobPath:TravelNextWaypoint()
	self.Index += 1
	self:TravelWaypoint()
end

function NoobPath:TravelWaypoint()
	local Waypoint = self:GetWaypoint()
	if self.Idle or not Waypoint then
		return
	end
	self.Move(Waypoint.Position)
	if self.Timeout then
		self:CheckForTimeout()
	end
	if Waypoint.Action == Enum.PathWaypointAction.Jump then
		self.InAir = true
		self.Jump(Waypoint.Position)
	end
end

function NoobPath:Arrive(Route, Partial)
	Route = Route or self.Route
	local Waypoint = Route[#Route]
	
	self.Idle = true
	self.Overide:Fire()
	self.Reached:Fire(Waypoint, Partial or self.Partial)
end

function NoobPath:Dump()
	self.Destroying = true
	
	task.defer(function() -- defer for things to settle down
		self.OnDestroy:Fire()

		task.defer(function()
			self.Path:Destroy()
			self.Reached:DisconnectAll()
			self.WaypointReached:DisconnectAll()
			self.Trapped:DisconnectAll()
			self.Error:DisconnectAll()
			self.Overide:DisconnectAll()
			self.OnDestroy:DisconnectAll()

			table.clear(self)
			setmetatable(self, nil)
			self = nil
		end)

	end)
end

-- Destroy The NoobPath Object
function NoobPath:Destroy()
	self:Stop()
	self.Destroying = true
	
	self.MoveFinishedC:Disconnect()
	self.JumpFinishedC:Disconnect()
	
	if Server then
		self.DescendantAddedC:Disconnect()
	end
	
	self:Dump()
end

return module
